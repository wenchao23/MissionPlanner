@page "/DataFlash"
@using System.Collections
@using System.Globalization
@using System.IO
@using System.Net
@using System.Net.WebSockets
@using System.Threading
@using MissionPlanner
@using MissionPlanner.Comms
@using MissionPlanner.Utilities
@using MissionPlanner.Log
@using System.IO;
@using System.Text;

@using System.Security.Cryptography;
@using Blazor.FileReader;
@using System.IO;
@using Blazor.Extensions
@using MissionPlanner.ArduPilot
@using Newtonsoft.Json
@using Org.BouncyCastle.Utilities.Encoders
@implements IDisposable
@inject IFileReaderService fileReaderService;
@inject HttpClient Http

<div id="container">
    <div id="right" style="float:right; width: 150px;">
        @if (cb != null)
        {
            @foreach (var item in SeenMessageTypes)
            {
                <ul style="margin: 0;">
                    <input type="checkbox" value="@item" onclick="if ($(this).is(':checked')) {$(this).siblings().css('display', 'block');} else {$(this).siblings().css('display', 'none');}" />
                    @item
                    @foreach (var subitem in cb.FMT.First(a => a.Value.Item2 == item).Value.Item4.Split(','))
                    {
                        <div style="display: none; margin-left: 20px;">
                            <li><input type="checkbox" onchange=@(async (eventArgs) => PlotItem(@item,@subitem, (bool)eventArgs.Value)) value="@item.@subitem" @(AmIChecked(item + "." + subitem)) />@subitem</li>
                        </div>
                    }
                </ul>
            }
        }

    </div>
    <div id="left" style="margin-right: 150px;">
        <input type="file" ref="inputTypeFileElement" accept=".bin, .log" onchange="@ReadFile" />

        <ul>
            @foreach (var gra in graphs)
            {
                <li>
                    <div id="@gra" style="width: 100%; height: 50vh" onclick=""></div>
                </li>
            }
            <li><button onclick="@addNewGraph">New Graph</button></li>
        </ul>
        <div id="div2" style="width: 100%; height: 50vh"></div>
        <div id="div3" style="width: 100%; height: 50vh"></div>
        <div>
            <input id="searchstring" value="" onkeyup="  var value = $(this).val().toLowerCase(); $('#paramlist > li#paramrow').filter(function () { $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1) });"/>
            <ul id="paramlist">
                <li id="paramheader">
                    <div>Name</div>
                    <div>Value</div>
                    <div>Desc</div>
                </li>
                @if (cb != null)
                {
                    @foreach (var item in CleanParamList)
                     {
                         <li id="paramrow">
                             <div>@item["Name"]</div>
                             <div>@item["Value"]</div>
                             <div>@ParameterMetaDataRepository.GetParameterMetaData(item["Name"], ParameterMetaDataConstants.DisplayName, Firmwares.ArduCopter2.ToString()) <br/>@ParameterMetaDataRepository.GetParameterMetaData(item["Name"], ParameterMetaDataConstants.Description, Firmwares.ArduCopter2.ToString())</div>
                         </li>
                     }
                }
            </ul>
        </div>
    </div>
</div>




@functions {
    private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

    protected override async Task OnInitAsync()
    {
        var paramdata = "ParameterMetaDataBackup.xml";
        var content = await Http.GetStringAsync((paramdata));
        File.WriteAllText(paramdata, content);
    }




    ElementRef inputTypeFileElement;

    CollectionBuffer cb = null;

    List<string> graphs = new List<string>() {"div1"};

    string selectedchart = "div1";

    public string AmIChecked(string item)
    {
        if (item == "GPS.Alt")
            return "checked";

        return "";
    }

    int a = 1;

    public void addNewGraph()
    {
        graphs.Add("graph" + a++);


    }

    public async void PlotItem(string type, string item, bool checked1)
    {
        if (checked1)
        {
            plotly line = new plotly(type + "." + item);
            int last = DateTime.MinValue.Second;
            foreach (var msg in cb.GetEnumeratorType(type))
            {
                var itemvalue = Convert.ToDouble(msg.GetRaw(item));
                if (itemvalue == null)
                    continue;

                if (last != DateTime.Now.Second)
                {
                    Console.WriteLine(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff") + " " + msg.lineno);
                    last = DateTime.Now.Second;
                }

                line.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), itemvalue);
            }
            Console.WriteLine("got data about to plot");
            JSRuntime.Current.InvokeAsync<object>("plotData", new object[] {selectedchart, line.getJSON()});
        }
        else
        {
            JSRuntime.Current.InvokeAsync<object>("evalline", new object[] {" index = " + selectedchart + ".data.findIndex(item => item.name === '" + type + "." + item + "'); if (index >= 0) Plotly.deleteTraces(" + selectedchart + ", index , 1 ); "});
        }
    }

    public async Task ReadFile()
    {
        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            log.Debug(file.ToJSON());

            var info = await file.ReadFileInfoAsync();

            log.Debug(info.ToJSON());

            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(1024 * 1024 * 5))
            {
                cb = new CollectionBuffer(memoryStream);

                foreach (var msg in cb.GetEnumeratorType("MSG"))
                {
                    log.Debug(msg.msgtype + " " + cb[msg.lineno]);
                }

                plotly linelat = new plotly("GPS.Lat");
                plotly linelng = new plotly("GPS.Lng");
                plotly linealt = new plotly("GPS.Alt");

                plotly linemap = new plotly("Map");
                linemap.root.mode = "linesa";
                linemap.root.type = "scattergeo";

                plotly scatter3d = new plotly("map3d");
                scatter3d.root.type = "scatter3d";
                scatter3d.root.mode = "lines";


                foreach (var msg in cb.GetEnumeratorType("GPS"))
                {
                    var lat = msg["Lat"];
                    var lng = msg["Lng"];
                    var alt = msg["Alt"];
                    if (lat == null)
                        continue;

                    var lat2 = double.Parse(lat, CultureInfo.InvariantCulture);
                    var lng2 = double.Parse(lng, CultureInfo.InvariantCulture);
                    var alt2 = double.Parse(alt, CultureInfo.InvariantCulture);

                    if (lat2 == 0)
                        continue;

                    linelat.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), lat2);
                    linelng.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), lng2);
                    linealt.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), alt2);

                    linemap.AddLatLng(lat2, lng2);

                    scatter3d.AddXYZ(lat2, lng2, alt2);
                }

                log.Debug("About to PLOT");

                JSRuntime.Current.InvokeAsync<object>("plotData", new object[] {"div1", linealt.getJSON()});
                JSRuntime.Current.InvokeAsync<object>("plotData", new object[] {"div2", linemap.getJSON()});
                JSRuntime.Current.InvokeAsync<object>("plotData", new object[] {"div3", scatter3d.getJSON()});
            }
        }
    }

    public void Dispose()
    {
    // Http?.Dispose();
    }

    public IEnumerable<string> SeenMessageTypes
    {
        get
        {
            var sorted = cb.SeenMessageTypes;
            sorted.Sort();
            return sorted;
        }

    }

    public IEnumerable<DFLog.DFItem> CleanParamList
    {
        get
        {
            var originalList = cb.GetEnumeratorType("PARM");
            var filteredList = originalList.GroupBy(param => param["Name"]).OrderBy(a => a.Key).Select(group => group.First());
            return filteredList;
        }
    }

    private void setLastGraph(string gra)
    {
        selectedchart = gra;
    }

}
